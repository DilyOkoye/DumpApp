@model DumpApp.BAL.OperationsModel.ViewModel.OperationsViewModel

@{
    ViewBag.Title = "AddUserProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    AjaxOptions options = new AjaxOptions();
    options.HttpMethod = "POST";
    options.OnBegin = "OnBegin";
    options.OnComplete = "OnComplete";
    options.OnFailure = "OnFailure";
    options.OnSuccess = "OnSuccess";
    options.LoadingElementId = "divProgress";
    options.LoadingElementDuration = 1000;
    options.UpdateTargetId = "divResponse";
    options.InsertionMode = InsertionMode.InsertAfter;
}
<script type='text/javascript'>
    function foo() {
        window.location = '@Model.Url';
    }
</script>
<div class="alert alert-success" id="searchResultsSuccess" style="display:none;">
    <a class="close" data-dismiss="alert" href="#" aria-hidden="true">&times;</a>

</div>
<div class="alert alert-danger" id="searchResultsError" style="display:none;">
    <a class="close" data-dismiss="alert" href="#" aria-hidden="true">&times;</a>

</div>
<div class="row">
    <div class="col-sm-12">

        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Load</h3>
                <div class="panel-options">
                    <a href="#" data-toggle="panel">
                        <span class="collapse-icon">&ndash;</span>
                        <span class="expand-icon">+</span>
                    </a>
                    <a href="#" data-toggle="remove">
                        &times;
                    </a>
                </div>
            </div>
            @using (Ajax.BeginForm("Load", "Operations", options, new { @class = "form parsley-form" }))
            {
                @Html.AntiForgeryToken()
                <div class="panel-body">

                    <div role="form" class="form-horizontal">
                        <div class="text-right">
                            <button type="button" id="btnTest" name="button" value="Test" class="btn btn-warning"><i class="fa-arrow-circle-right"></i>Test Load Connection</button>

                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="dumpTypeCheck">Requires Initialization</label>
                            <div class="col-sm-10">
                                @Html.CheckBoxFor(model => model.dumps.DumpTypeCheck, new { @autocomplete = "off", @class = "form-check-input", @id = "DumpTypeCheck", @disabled = "disabled" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="inlineRadio1">Dump Type</label>
                            <div class="col-sm-10">
                                <div class="form-check form-check-inline">
                                    @Html.RadioButtonFor(model => model.dumps.DumpType, "Offsite", new { @autocomplete = "off", @class = "form-check-input", @name = "DumpTypeRadio", @id = "DumpTypeOffsite", @disabled = "disabled" })

                                    <label class="form-check-label" for="inlineRadio1">Offsite Use</label>
                                    &nbsp;&nbsp;
                                    @Html.RadioButtonFor(model => model.dumps.DumpType, "Internal", new { @autocomplete = "off", @class = "form-check-input", @name = "DumpTypeRadio", @id = "DumpTypeInternal", @disabled = "disabled" })

                                    <label class="form-check-label" for="inlineRadio1">Internal Use</label>
                                </div>
                            </div>
                        </div>

                        @if (Model.dumps.DumpType == "Offsite")
                        {
                            <div class="form-group-separator"></div>

                            <div class="form-group" id="divLocation">
                                <label class="col-sm-2 control-label">Location</label>

                                <div class="col-sm-10">
                                    @Html.DropDownListFor(model => model.dumps.LocationId, new SelectList(Model.drpLocation, "Value", "Text"), "Select Location", new { @autocomplete = "off", required = "required", @class = "form-control single-select", @id = "LocationId" })
                                </div>
                            </div>

                        }

                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-1">Tape Identifier</label>

                            <div class="col-sm-10">
                                @Html.HiddenFor(o => o.dumps.TapeIdentifier, new { id = "TapeName1" })
                                @Html.TextBoxFor(model => model.dumps.TapeIdentifier, new { @autocomplete = "off", @style = "text-transform:uppercase", @class = "form-control", @id = "TapeIdentifier", required = "required", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Dump Name</label>

                            <div class="col-sm-10">
                                @Html.TextBoxFor(model => model.dumps.DumpName, new { @autocomplete = "off", @class = "form-control", @id = "DumpName", required = "required", @readonly = "readonly" })

                            </div>
                        </div>

                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Filename</label>

                            <div class="col-sm-10">
                                @Html.TextBoxFor(model => model.dumps.Filename, new { @autocomplete = "off", @class = "form-control", @id = "Filename", required = "required", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Dump Description</label>

                            <div class="col-sm-10">
                                @Html.TextAreaFor(model => model.dumps.DumpDescription, new { @autocomplete = "off", @class = "form-control", @id = "DumpDescription", required = "required", @readonly = "readonly" })
                            </div>
                        </div>



                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">Database</label>

                            <div class="col-sm-10">
                                @Html.DropDownListFor(model => model.dumps.DatebaseId, new SelectList(Model.drpDatabase, "Value", "Text"), "Select Database", new { @autocomplete = "off", @class = "form-control single-select", @id = "DatebaseId", required = "required" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label">Tape Device</label>

                            <div class="col-sm-10">
                                @Html.DropDownListFor(model => model.dumps.TapeDeviceId, new SelectList(Model.drpTapeDevice, "Value", "Text"), "Select Tape Device", new { @autocomplete = "off", @class = "form-control single-select", @id = "TapeDeviceId", required = "required", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Dumped By</label>

                            <div class="col-sm-10">
                                @Html.TextBoxFor(model => model.dumps.CreatedBy, new { @autocomplete = "off", @class = "form-control", @id = "Filename", required = "required", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Dumped Date</label>

                            <div class="col-sm-10">
                                @Html.TextBoxFor(model => model.dumps.DumpDate, new { @autocomplete = "off", @class = "form-control", @id = "Filename", required = "required", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-2">Status</label>

                            <div class="col-sm-10">
                                @Html.TextBoxFor(model => model.dumps.Status, new { @autocomplete = "off", @class = "form-control", @id = "Filename", required = "required", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group-separator"></div>

                        <div class="form-group">
                            <label class="col-sm-2 control-label" for="field-3"></label>
                            <div class="col-sm-10">
                                @if (Model.roleManager.CanAdd)
                                {
                                    <button type="submit" value="Execute" name="button" class="btn btn-success"><i class="fa-check"></i>Execute Load</button>
                                }
                                <input type="button" id="Return" value="Return " class="btn btn-info" onclick="foo()">
                                <a href="@Url.Action("LoadList", "Operations", new {menuId =15})" class="btn btn-primary">Go to Load List</a>

                            </div>



                        </div>

                    </div>

                </div>
            }
        </div>

    </div>
</div>
@Html.Hidden("TestConnection", Url.Action("TestConnection", "Operations"))

<script>
    $(document).ready(function () {

         $('#LocationId').change(function () {
    var locationId = $(this).val();

    // Send an AJAX request to the server to get databases based on the selected locationId
             $.getJSON('@Url.Action("GetDatabases", "Operations")', { locationId: locationId }, function (databases) {
    // Check if the #DatebaseId element exists
    var databaseDropdown = $('#DatebaseId');
    if (databaseDropdown.length > 0) {
        // Clear the database dropdown before adding new options
        databaseDropdown.empty();

        // Iterate over the object properties
        $.each(databases, function (key, value) {
           // alert("test")
            // Use the value of the 'Name' property as both the option value and text
            databaseDropdown.append($('<option/>', {
                value: value.Name,
                text: value.Name
            }));
        });

       }
           else {
        console.log("#DatebaseId element not found.");
                 }
});
});
    });

    $(document).on('click', '#btnTest', function () {
        var formData = {
            DumpTypeCheck: $('#DumpTypeCheck').val(),
            DumpType: $('input[name="dumps.DumpType"]:checked').val(),
            LocationId: $('#LocationId').val(),
            TapeIdentifier: $('#TapeIdentifier').val(),
            DumpName: $('#DumpName').val(),
            Filename: $('#Filename').val(),
            DumpDescription: $('#DumpDescription').val(),
            DatebaseId: $('#DatebaseId').val(),
            TapeDeviceId: $('#TapeDeviceId').val(),
            OperationType: "Load",
            Id: $('#dumpId').val(),
        };

        $.ajax({
            url: $("#TestConnection").val(),
            type: 'POST', // Change to POST since you are sending data
            contentType: 'application/json',
            data: JSON.stringify(formData), // Serialize the data as JSON
            success: function (data) {
                if (data.nErrorCode == 0) {
                    $('#searchResultsSuccess').show();
                    $('#searchResultsSuccess').html("Load Test Successful")
                    return;
                }
                else {
                    $('#searchResultsSuccess').hide();
                    $('#searchResultsError').delay(800).slideDown(500);
                    $('#searchResultsError').html(data.sErrorText == null ? "Internal Error While Attempting Test Load" : data.sErrorText)
                    return;
                }
            },
            error: function () {
                $('#searchResultsSuccess').hide();
                $('#searchResultsError').delay(800).slideDown(500);
                $('#searchResultsError').html("Internal Error While Attempting Test Load")
            }
        });
    });
</script>